message SwitchInfoProto {
  optional int32 current_round = 1;
  optional int32 switching_round = 2;

  enum PartitionType {
    HYBRID = 1;
    FULL_GENUINE = 2;
    FULL_LOW_LATENCY = 3;
  };
  optional PartitionType partition_type = 3;

  enum MessageType {
    INIT_MSG = 1;
    ABORT = 2;
    GENUINE_SWITCH_ROUND_VOTE = 3;
    MEC_SYNCHRONIZED = 4;
    LOW_LATENCY_MAPPING_REQUEST = 5;
    LOW_LATENCY_MAPPING_RESPONSE = 6;
    LOW_LATENCY_MAPPING_FINISHED = 7;
    LOW_LATENCY_ROUND_VOTE = 8;
  };
  optional MessageType type = 4;

  // Key: partition id
  // Value: hop count from switching partitions.
  /* map<int32, int32> partition_mapping = 5; */

  // The id of the mapping.
  optional int64 mapping_id = 6;

  optional int32 final_round = 7;

  // Leader of the switch. Used for hybrid GENUINE -> LOW LATENCY switch.
  /* optional int32 mapping_leader = 8; */

  // This partition hop according to the parent hop.
  /* optional int32 hop_count = 9; */

  repeated int32 neighbours_partition = 10;

  optional bool mapping_already_handled = 11;

  // Check whether the message is sent is to initialize or to respond.
  // Big HACK!
  optional bool init_msg_initializer = 12 [default = false];
}
